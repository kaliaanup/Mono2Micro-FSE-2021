A. Example 1 (One use case)
1. sample traces
======================================================================
1607136505822,u1,$Root$ calls C1,<None>:$Root$:<None>,C1.java:C1:m1
1607136505823,u1,C1 calls C2,C1.java:C1:m1,C2.java:C2:m2
1607136505823,u1,C2 calls C3,C2.java:C2:m2,C3.java:C3:m3
1607136505823,u1,C3 calls C4,C3.java:C3:m3,C4.java:C4:m4
1607136505823,u1,C4 returns to C3, C4.java:C4:m4,C3.java:C3:m3
1607136505823,u1,C3 returns to C2, C3.java:C3:m3,C2.java:C2:m2
1607136505823,u1,C2 returns to C1, C2.java:C2:m2,C1.java:C1:m1
1607136505823,u1,C1 returns to $Root$, C1.java:C1:m1,<None>:$Root$:<None>
1607136505822,u1,$Root$ calls C1,<None>:$Root$:<None>,C1.java:C1:m1
1607136505823,u1,C1 calls C2,C1.java:C1:m1,C2.java:C2:m2
1607136505823,u1,C2 calls C5,C2.java:C2:m2,C5.java:C5:m5
1607136505823,u1,C5 calls C6,C5.java:C5:m5,C6.java:C6:m6
1607136505823,u1,C6 returns to C5, C6.java:C6:m6,C5.java:C5:m5
1607136505823,u1,C5 returns to C2, C5.java:C5:m5,C2.java:C2:m2
1607136505823,u1,C2 returns to C1, C2.java:C2:m2,C1.java:C1:m1
1607136505823,u1,C1 returns to $Root$, C1.java:C1:m1,<None>:$Root$:<None>
======================================================================

u1:t1 = $Root$->C1->C2->C3->C4
u1:t2 = $Root$->C1->C2->C5->C6



2.  * use cases: {'u1': 0}
	* classes:  {'C1': 0, 'C2': 1, 'C3': 2, 'C4': 3, 'C5': 4, 'C6': 5}



3. direct relationships

	"C1--C2": 1,
	"C2--C3": 1,
	"C3--C4": 1,
	"C2--C5": 1,
	"C5--C6": 1,

4. indirect relationships

	"C1--C3": 1,
	"C1--C4": 1,
	"C1--C5": 1,
	"C1--C6": 1,
	"C2--C4": 1,
	"C2--C5": 1,
	"C2--C6": 1,


5. causal relationships among classes in case of use case u1 
   ** note that we take an undirected edge. So for every directed edge Ci-Cj we also represent both Ci-Cj and Cj-Ci as 1.


	u1, C1, C2, C3, C4, C5, C6
	C1, 0,  1,  0,  0,  0,  0
	C2, 1,  0,  1,  0,  1,  0
	C3, 0,  1,  0,  1,  0,  0
	C4, 0,  0,  1,  0,  0,  0
	C5, 0,  1,  0,  0,  0,  1
	C6, 0,  0,  0,  0,  1,  0

6. co-occuring relationships among classes in case of use case u1 
	** note that we take an undirected edge. So for every directed edge Ci-Cj we also represent both Ci-Cj and Cj-Ci as 1.
	** the co-occuring relation also includes the direct call relations

	u1, C1, C2, C3, C4, C5, C6
	C1, 0,  1,  1,  1,  1,  1
	C2, 1,  0,  1,  1,  1,  1
	C3, 1,  1,  0,  1,  0,  0
	C4, 1,  1,  1,  0,  0,  0
	C5, 1,  1,  0,  0,  0,  1
	C6, 1,  1,  0,  0,  1,  0

7. causal score (DCR)

	u1, C1, C2, C3, C4, C5, C6
	C1, 0,  1,  0,  0,  0,  0
	C2, 1,  0,  1,  0,  1,  0
	C3, 0,  1,  0,  1,  0,  0
	C4, 0,  0,  1,  0,  0,  0
	C5, 0,  1,  0,  0,  0,  1
	C6, 0,  0,  0,  0,  1,  0

	DCR(Ci, Cj) = #edge(C1,C2) in all use cases / union (use cases where C1 occurs, use cases where C2 occurs)
	
	DCR(C1, C2) = {u1}/ union({u1}, {u1}) = 1/1 = 1

	DCR(C1, C3) = {}/union({u1}, {u1}) = 0/1 = 0



8. co-occuring score (ICR)

	u1, C1, C2, C3, C4, C5, C6
	C1, 0,  1,  1,  1,  1,  1
	C2, 1,  0,  1,  1,  1,  1
	C3, 1,  1,  0,  1,  0,  0
	C4, 1,  1,  1,  0,  0,  0
	C5, 1,  1,  0,  0,  0,  1
	C6, 1,  1,  0,  0,  1,  0


	ICR(Ci, Cj) = use cases where C1->C2 occurs / union (use cases where C1 occurs, use cases where C2 occurs)
	
	ICR(C1, C2) = {u1}/ union({u1}, {u1}) = 1/1 = 1

	ICR(C1, C3) = {u1}/union({u1}, {u1}) = 1/1 = 1

	ICR(C3, C5) = {}/union({u1}, {u1}) = 0/1 = 0


9. causal pattern score (DCP)

	
	u1, C1,   C2,   C3,   C4,   C5,    C6
	C1, 0.00, 0.50, 0.75, 0.50, 0.75, 0.50
	C2, 0.50, 0.00, 0.25, 0.50, 0.25, 0.50
	C3, 0.75, 0.25, 0.00, 0.75, 0.50, 0.25
	C4, 0.50, 0.50, 0.75, 0.00, 0.25, 0.50
	C5, 0.75, 0.25, 0.50, 0.25, 0.00, 0.75
	C6, 0.50, 0.50, 0.25, 0.50, 0.75, 0

	DCP(Ci, Cj) = intersection (use cases where Ci->Ck occurs, use cases where Cj->Ck occurs) / (|C|-2) * (|B|)
				

	total = (|C|-2) * (|B|) = (6 - 2)*1=4

	DCP(C1, C2) = 4-2/4 = 2/4 = 0.5
	DCP(C1, C3) = 4-1/4 = 3/4 = 0.75
	

10. co-occuring pattern score (ICP)


	u1, C1, C2, C3,   C4,   C5,   C6
	C1, 0,  1,  0.5,  0.5,  0.5,  0.5
	C2, 1,  0,  0.5,  0.5,  0.5,  0.5
	C3, 0.5,  0.5,  0,  1,  0.5,  0.5
	C4, 0.5,  0.5,  1.0,  0,  0.5,  0.5
	C5, 0.5,  0.5,  0.5,  0.5,  0,  0.5
	C6, 0.5,  0.5,  0.5,  0.5,  1,  0

	ICP(Ci, Cj) = intersection (use cases where Ci->Ck occurs, use cases where Cj->Ck occurs) / (|C|-2) * (|B|)
				

	total = (|C|-2) * (|B|) = (6 - 2)*1=4

	ICP(C1, C2) = 4-0/4 = 4/4 = 1
	ICP(C1, C3) = 4-2/4 = 2/4 = 0.5


11. Similarity Matrix: S

    C1,   C2,  C3,  C4,  C5,  C6
 C1 [0.   3.5  2.25 2.   2.25 2.  ]
 C2 [3.5  0.   2.75 2.   2.75 2.  ]
 C3 [2.25 2.75 0.   3.75 1.   0.75]
 C4 [2.   2.   3.75 0.   0.75 1.  ]
 C5 [2.25 2.75 1.   0.75 0.   3.75]
 C6 [2.   2.   0.75 1.   3.75 0.  ]


12. ****** Run hierarchical clustering algorithm. ******
	Get initial assignment
	Number of initial partition: {}6
	Iteration 0 at timestamp 2021-07-16 02:08:19.928942
	Merge cluster: [2, 3]
	Max jaccard: 3.75
	Number of clusters: 5


	Iteration 1 at timestamp 2021-07-16 02:08:19.929014
	Merge cluster: [3, 4]
	Max jaccard: 3.75
	Number of clusters: 4


	Iteration 2 at timestamp 2021-07-16 02:08:19.929047
	Merge cluster: [2, 3]
	Max jaccard: 3.5
	Number of clusters: 3



B. Example 2 (Multiple Use Cases)

1607136505822,u1,$Root$ calls C1,<None>:$Root$:<None>,C1.java:C1:m1
1607136505823,u1,C1 calls C3,C1.java:C1:m1,C3.java:C3:m3
1607136505823,u1,C3 returns to C1, C3.java:C3:m3,C1.java:C1:m1
1607136505823,u1,C1 returns to $Root$, C1.java:C1:m1,<None>:$Root$:<None>
1607136505822,u1,$Root$ calls C1,<None>:$Root$:<None>,C1.java:C1:m1
1607136505823,u1,C1 calls C5,C1.java:C1:m1,C5.java:C5:m5
1607136505823,u1,C5 returns to C1, C5.java:C5:m5,C1.java:C1:m1
1607136505823,u1,C1 returns to $Root$, C1.java:C1:m1,<None>:$Root$:<None>
1607136505822,u1,$Root$ calls C2,<None>:$Root$:<None>,C2.java:C2:m2
1607136505823,u1,C2 calls C3,C1.java:C2:m2,C3.java:C3:m3
1607136505823,u1,C3 returns to C2, C3.java:C3:m3,C2.java:C2:m2
1607136505823,u1,C2 returns to $Root$, C2.java:C2:m2,<None>:$Root$:<None>
1607136505822,u1,$Root$ calls C2,<None>:$Root$:<None>,C2.java:C2:m2
1607136505823,u1,C2 calls C5,C2.java:C2:m2,C5.java:C5:m5
1607136505823,u1,C5 returns to C2, C5.java:C5:m5,C2.java:C2:m2
1607136505823,u1,C2 returns to $Root$, C2.java:C2:m2,<None>:$Root$:<None>
1607136505822,u2,$Root$ calls C1,<None>:$Root$:<None>,C1.java:C1:m1
1607136505823,u2,C1 calls C3,C1.java:C1:m1,C3.java:C3:m3
1607136505823,u2,C3 returns to C1, C3.java:C3:m3,C1.java:C1:m1
1607136505823,u2,C1 returns to $Root$, C1.java:C1:m1,<None>:$Root$:<None>
1607136505822,u2,$Root$ calls C2,<None>:$Root$:<None>,C2.java:C2:m2
1607136505823,u2,C2 calls C4,C2.java:C2:m2,C4.java:C4:m4
1607136505823,u2,C4 returns to C2, C4.java:C4:m4,C2.java:C2:m2
1607136505823,u2,C2 returns to $Root$, C2.java:C2:m2,<None>:$Root$:<None>
1607136505822,u2,$Root$ calls C2,<None>:$Root$:<None>,C2.java:C2:m2
1607136505823,u2,C2 calls C5,C2.java:C2:m2,C5.java:C5:m5
1607136505823,u2,C5 returns to C2, C5.java:C5:m5,C2.java:C2:m2
1607136505823,u2,C2 returns to $Root$, C2.java:C2:m2,<None>:$Root$:<None>


2.  * use cases: {'u1': 0}
	* classes:  {'C1': 0, 'C2': 1, 'C3': 2, 'C4': 3, 'C5': 4, 'C6': 5}



3. direct relationships

"u1": {
        "C1--C3": 1,
        "C3--C1": 1,
        "C1--C5": 1,
        "C5--C1": 1,
        "C2--C3": 1,
        "C3--C2": 1,
        "C2--C5": 1,
        "C5--C2": 1
    },
"u2": {
        "C1--C3": 1,
        "C3--C1": 1,
        "C2--C4": 1,
        "C4--C2": 1,
        "C2--C5": 1,
        "C5--C2": 1
    }

4. indirect relationships

"u1": {
        "C1--C3": 1,
        "C3--C1": 1,
        "C1--C5": 1,
        "C5--C1": 1,
        "C2--C3": 1,
        "C3--C2": 1,
        "C2--C5": 1,
        "C5--C2": 1
    },
"u2": {
        "C1--C3": 1,
        "C3--C1": 1,
        "C2--C4": 1,
        "C4--C2": 1,
        "C2--C5": 1,
        "C5--C2": 1
    }

5. causal relationships among classes in case of use case u1
   ** note that we take an undirected edge. So for every directed edge Ci-Cj we also represent both Ci-Cj and Cj-Ci as 1.

dict: {'C1': [[0, 0], [1, 1], [1, 0], [0, 0], [0, 0]], 'C3': [[1, 1], [0, 0], [0, 0], [1, 0], [0, 0]], 'C5': [[1, 0], [0, 0], [0, 0], [1, 1], 
 [0, 0]], 'C2': [[0, 0], [1, 0], [1, 1], [0, 0], [0, 1]], 'C4': [[0, 0], [0, 0], [0, 0], [0, 1], [0, 0]]}

	C1  u1  u2.    C2 u1 u2
	-----------    ------------ 
	C1  0   0     C1   0  0
	C3  1   1     C3   1  0
	C5  1   0     C5   1  1
	C2  0   0     C2   0  0
	C4  0   0     C4   0  1




6. co-occuring relationships among classes in case of use case u1
	** note that we take an undirected edge. So for every directed edge Ci-Cj we also represent both Ci-Cj and Cj-Ci as 1.
	** the co-occuring relation also includes the direct call relations

dict: {'C1': [[0, 0], [1, 1], [1, 0], [0, 0], [0, 0]], 'C3': [[1, 1], [0, 0], [0, 0], [1, 0], [0, 0]], 'C5': [[1, 0], [0, 0], [0, 0], [1, 1], 
 [0, 0]], 'C2': [[0, 0], [1, 0], [1, 1], [0, 0], [0, 1]], 'C4': [[0, 0], [0, 0], [0, 0], [0, 1], [0, 0]]}

	C1  u1  u2	   C2 u1 u2
	-----------    ------------ 
	C1  0   0 	  C1   0  0
	C3  1   1     C3   1  0
	C5  1   0     C5   1  1
	C2  0   0     C2   0  0
	C4  0   0     C4   0  1


7. causal score (DCR)
{'C1': 0, 'C3': 1, 'C5': 2, 'C2': 3, 'C4': 4}

	C1  u1  u2    C2 u1 u2			C3 u1 u2
	-----------    -----------		-----------
	C1  0   0     C1   0  0		         C1 1   1 
	C3  1   1     C3   1  0			C3 0   0
	C5  1   0     C5   1  1			C5 0   0
	C2  0   0     C2   0  0			C2 1   0
	C4  0   0     C4   0  1			C4 0   0


	DCR(Ci, Cj) = #edge(C1,C2) in all use cases / union (use cases where C1 occurs, use cases where C2 occurs)
	
	DCR(C1, C3) = {u1, u2}/ union({u1}, {u1}) = 2/2 = 1


8. co-occuring score (ICR)

C1  u1  u2	      C2 u1 u2
	-----------   ------------ 
	C1  0   0 	  C1   0  0
	C3  1   1     C3   1  0
	C5  1   0     C5   1  1
	C2  0   0     C2   0  0
	C4  0   0     C4   0  1

DCR(Ci, Cj) = #edge(C1,C2) in all use cases / union (use cases where C1 occurs, use cases where C2 occurs)
	
	DCR(C1, C3) = {u1, u2}/ union({u1}, {u1}) = 2/2 = 1


9. causal pattern score (ICP)

	C1  u1  u2     C2 u1 u2			C3 u1 u2
	-----------    -----------		-----------
	C1  0   0.    C1   0  0		    C1 1   1 
	C3  1   1     C3   1  0			C3 0   0
	C5  1   0     C5   1  1			C5 0   0
	C2  0   0     C2   0  0			C2 1   0
	C4  0   0     C4   0  1			C4 0   0
	

	
	 {'C1': 0, 'C3': 1, 'C5': 2, 'C2': 3, 'C4': 4}




	DCP(Ci, Cj) = intersection (use cases where Ci->Ck occurs, use cases where Cj->Ck occurs) / (|C|-2) * (|B|)
				

	total = (|C|-2) * (|B|) = (5 - 2)*2=6

	DCP(C1, C2) = 6-3/6 = 3/6 = 0.5

	DCP(C1, C3) = 6-2/6 = 4/6 = 0.67

	
	


	
